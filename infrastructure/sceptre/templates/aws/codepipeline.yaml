AWSTemplateFormatVersion: '2010-09-09'
Description: CI/CD CodePipeline
Parameters:
  Name:
    Description: Project name.
    Type: String
  ArtifactBucket:
    Description: S3 Bucket Name for the artifacts.
    Type: String
  GitToken:
    Description: Token to access GITHUB repos.
    Type: String
    NoEcho: true
  GitWebhookSecret:
    Description: Github webhook secret.
    Type: String
  GitRepositoryOwner:
    Description: GIT repository organisation where reside application code.
    Type: String
  GitRepositoryApplication:
    Description: GIT repository name where reside application code.
    Type: String
  GitBranchApplication:
    Description: GIT branch name where reside application code.
    Type: String
  BuildApp:
    Description: Build project.
    Type: String
  TagProductionApp:
    Description: tag app.
    Type: String
  SNSTopic:
    Description: SNS topic name.
    Type: String
Resources:
  CodePipelineStageChange:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Push message to topic when build state change"
      EventPattern:
        {
          "source": [
            "aws.codepipeline"
          ],
          "detail-type": [
            "CodePipeline Stage Execution State Change"
          ],
          "detail": {
            "pipeline": [
              !Ref ApplicationPipeline
            ],
            "stage": [
              "Source",
              "BuildApp",
              "TagProductionApp"
            ],
            "state": [
              "FAILED"
            ]
          }
        }
      Name: !Join [ "-", [ !Ref Name, "CodePipelineStageChange" ] ]
      Targets:
        - Arn: !Ref SNSTopic
          Id: "PipelineNotificationTopic"
          InputTransformer:
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              stage: "$.detail.stage"
              state: "$.detail.state"
            InputTemplate: '"The Pipeline <pipeline> has reached the status of <state> for stage <stage>. You can check your pipeline at this link https://console.aws.amazon.com/codepipeline/home?region=eu-west-1#/view/<pipeline>"'
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref Name, "codepipeline-role" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Join [ "-", [ !Ref Name, "codepipeline-policy" ] ]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: kms:*
            Resource: "*"
          - Action:
            - ec2:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - sqs:*
            - ecs:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Name}*
            Effect: Allow
          Version: '2012-10-17'
  ApplicationPipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    DependsOn: ApplicationPipeline
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref ApplicationPipeline
      TargetAction: Application
      Name: !Join ["-", [ !Ref Name, 'PipelineWebhook' ] ]
      TargetPipelineVersion: !GetAtt ApplicationPipeline.Version
      RegisterWithThirdParty: true
  ApplicationPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref Name
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
      ### STAGE SOURCE ###
      - Name: Source
        Actions:
          - Name: Application
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: '1'
              Provider: GitHub
            OutputArtifacts:
            - Name: ApplicationSource
            Configuration:
              Owner: !Ref GitRepositoryOwner
              Repo: !Ref GitRepositoryApplication
              Branch: !Ref GitBranchApplication
              OAuthToken: !Ref GitToken
              PollForSourceChanges: false
            RunOrder: 1
      ### STAGE STAGING ###
      - Name: BuildApp
        Actions:
        - Name: BuildApp
          InputArtifacts:
          - Name: ApplicationSource
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref BuildApp
          RunOrder: 1
      ### STAGE MANUAL APPROVAL ###
      - Name: ManualApproval
        Actions:
        - Name: Approve
          ActionTypeId:
            Category: Approval
            Owner: AWS
            Version: 1
            Provider: Manual
          Configuration:
            NotificationArn: !Ref SNSTopic
            CustomData:
              Fn::Sub: 'Do you want to continue and publish on the production stack?'
          RunOrder: 1
      ### STAGE PRODUCTION ###
      - Name: TagProductionApp
        Actions:
        - Name: TagProductionApp
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          InputArtifacts:
          - Name: ApplicationSource
          Configuration:
            ProjectName: !Ref TagProductionApp
          RunOrder: 1
Outputs:
  PipelineUrl:
    Description: CodePipeline url.
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationPipeline}
  PipelineWebhook:
    Description: CodePipeline url.
    Value: !GetAtt ApplicationPipelineWebhook.Url
